JSON
 4. Создать внешний репозиторий c названием JSON.
 - Делаем через ВЭБ.
 
 5. Клонировать репозиторий JSON на локальный компьютер.
 - git clone (вставляем ссылку на внешний депозиторий, скопированную на странице соответствующего репозитория: Code - HTTPS)
 
 6. Внутри локального JSON создать файл “new.json”.
 - touch new.json
 
 7. Добавить файл под гит.
 - git add new.json (можно git add .)
 
 8. Закоммитить файл.
 - git commit -m 'new.json added'
 
 9. Отправить файл на внешний GitHub репозиторий.
 - git push
 
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 vim new.json
 i
{
        "ФИО": "Попов Андрей Сергеевич",
        "Возраст": 38,
        "Количество домашних животных": 1,
        "Будущая желаемая зарплата": 60" тыс.руб."

}
Esc:wq
 
 11. Отправить изменения на внешний репозиторий.
 - git commit -am "Added info to new.json"
 - git push
 
 12. Создать файл preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 - vim preferences.json
 -i
{
        "Любимый фильм": "Побег из Шоушенко",
        "Любимый сериал": "Друзья",
        "Любимая еда": "Турецкая кухня",
        "Любимое время года": "Лето",
        "Страна, которую хотели бы посетить": "США"

}
- Esc:wq

 14. Создать файл sklls.json, добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 - vim skills.json
 - i
 {
        "Instruments": "GITbash, GIT, Postman, DevTools, DBeaver, Charles Proxy, Fiddler",
        "Basis of programming languages": "Java Script, Python, SQL",
        "Testing skills": "Functional testing, API testing",
        "Testing artefacts preparation": "Test cases, Check lists, Bug reports"
}
- Esc:wq
 
 15. Отправить сразу 2 файла на внешний репозиторий.
 - git add .
 - git commit -m 'Preferences.json and Skills.json added'
 - git push
  
 16. На веб интерфейсе создать файл bug_report.json.
 - В вэб интерфейсе заходим в репозиторий "JSON" и нажимаем кнопку "Add file" - "Create new file"
 - В открывшемся окошке вводим имя файла "bug_report.json"
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 - Нажимаем кнопку внизу экрана "Commit new file"
 
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 - Кликаем на на название файла "bug_report.json", в открывшемся окне нажимаем на кнопку "карандаш"
 - В появившемся окне добавляем данные:
[
	{
		"Bug report ID": 1,
		"Title": "An out of stock product is succesfully added to a basket",
		"Steps To Reproduce":{
                  "Step 1": "Go to Granada Hand-Painted Dining Collection product page https://qatest-dev.indvp.com/granada-hand-painted-dining-collection.",
                  "Step 2": "Increase order amount of each item to 1.",
                  "Step 3": "Click ADD TO BASKET button"
                },

		"Expected Result": "Sorry! The product is out of stock' notification appears and product is not added to a cart",
		"Actual Result":  " 'Product added to cart' notification appears and product is added to a cart"
	}
]
  
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 - Нажимаем кнопку внизу экрана "Commit changes"
  
 20. Синхронизировать внешний и локальный репозиторий JSON
 - git pull